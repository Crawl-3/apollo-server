{
  "compilerOptions": {
    "incremental": true
    /* Enable incremental compilation */,
    "target": "ES6"
    /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "ES7",
      "DOM"
    ]
    /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "module": "commonjs"
    /* Specify what module code is generated. */,
    "rootDir": "./src"
    /* Specify the root folder within your source files. */,
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": [
      "node_modules/@types"
    ]
    /* Specify multiple folders that act like `./node_modules/@types`. */,
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    "resolveJsonModule": true
    /* Enable importing .json files */,
    "declaration": true
    /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true
    /* Create sourcemaps for d.ts files. */,
    "outDir": "./dist/development"
    /* Specify an output folder for all emitted files. */,
    // "removeComments": true,                           /* Disable emitting comments. */
    "inlineSourceMap": true
    /* Include sourcemap files inside the emitted JavaScript. */,
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true
    /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "forceConsistentCasingInFileNames": true
    /* Ensure that casing is correct in imports. */,
    "strict": true
    /* Enable all strict type-checking options. */,
    "noImplicitAny": true
    /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": true
    /* When type checking, take into account `null` and `undefined`. */,
    "noImplicitThis": true
    /* Enable error reporting when `this` is given the type `any`. */,
    "useUnknownInCatchVariables": true
    /* Type catch clause variables as 'unknown' instead of 'any'. */,
    "alwaysStrict": true
    /* Ensure 'use strict' is always emitted. */,
    "noUnusedLocals": true
    /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": true
    /* Raise an error when a function parameter isn't read */,
    "noImplicitReturns": true
    /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "skipDefaultLibCheck": true
    /* Skip type checking .d.ts files that are included with TypeScript. */,
    "skipLibCheck": true
    /* Skip type checking all .d.ts files. */
  }
}
